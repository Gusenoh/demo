Uploading Important or very helpful information for testing:
=============================================================
7) Data Provider Testing using @DataProvider Annotation

i) Read Test Data (String Type Data) from Excel file and conduct Data Driven Test for Admin Login Funtionality

ii) Read Test Data(Integer Type Data) from Excel file and conduct Data Driven Testing
----------------------------------------------------
Java programming has 3 types of feature support
i)Built-in
conditional statements,
loops'
Arrays
System.out.prinLn();

ii) Predifined(import and use)

File Class,
Scanner,
Etc.....

iii) External Features(download 3rd party Jars, add to Java project, import in the Java Class nd use)
Excel.. Jar from the internet
SQL Jar Etc........
--------------------------------------------------------
Admin Login Funtionality
i)Launch the browser
ii)Navigate to the gcrshop Admin interface("http://www.gcrit.com/build3/admin/")
iii)Enter Username
iv)enter password
v)Click "Login" Button
-----------------------
Verification Point/s

Capture the URL after login and compare with Expected

Expected URL:
"http://www.gcrit.com/build3/admin/index.php"

Input Data/Test Data:
Ref: input.xls

-------------------------------------------------------

Steps for Data Driven Testing :
i) create Selenium Test Case
ii) Creat Test Data File(Excel File)
ii) Download Excel Jar file from Internet, Add to Java project in Eclipse IDE Import nd use
iv)Import Test Data from Excell and connect the Data to the Test Case
-----------------------------------------------------

Selenium Data driven Test Case

===============================================================================================================================
# TestingGit1
For testing first git programme
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Reminders for setting up a maven project
Steps to run a maven project in itellij ide
select a new project 
Then select maven
Choose a name for groupID e.g(com.learn.maven)
Choose artifactsID e.g (learn.maven)
you could tick using a template archetype or just click finish.
In our new proect go to source
Two folders main and test.
for development choose main,but for testing purposes choose test 
There is a maven pakage created already. you could use his or create another.
Create a new simple class.
Scroll down identify a file call pom.xlm(most important file for our project).
Open the xml file and yo can add dependencies we need for our project.
These dependecies can be downloaded from https://mvnrepository.com/
Then the ide will automatically update the for us.
We can share the xml updated file with our team so we are all using the same updated versions.

/////////////////////////////////////////////////////////////////////////////////

Test code to show application and browser Automation Example:
---------------------------------------------------------------
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class AccNew {
WebDriver driver;

    @BeforeTest
    public void setUp(){

        System.setProperty("webdriver.gecko.driver","C:\\Users\\lenovo\\Desktop\\drivers\\geckodriver.exe");
        WebDriver driver = new FirefoxDriver();
        driver.get("http://newtours.demoaut.com/");
        String T = driver.getTitle();
        System.out.println(T);

    }

    @Test(priority = 1)

    public void registerAcc(){
        System.out.println("Registration successful");
    }
    @Test(priority = 2)
    public void logIn(){
        System.out.println("Successfully log-in");

    }
    @Test(priority = 3)
    public void navigateMenu(){
        System.out.println("Menu navigatable");
    }
    @Test(priority = 4)
    public void accSetting(){
        System.out.println("Sucessfully access account Settings");
    }
    @Test(priority = 5)
    public void changeEmail(){
        System.out.println("Email successfully changed");
    }
    @Test(priority = 6)
    public void selectItem(){
        System.out.println("Item selected");
    }
    @Test(priority = 7)
    public void goToCheckOut(){
        System.out.println("Sucessfully checked Out");
    }

    @Test(priority = 8)
    public void signOut(){
        System.out.println("Successfully Loogged Out");
    }




}


=======
just making a slight change 
>>>>>>> 17f35957eeb0c1eef2336933a9aef221e0bd007e


